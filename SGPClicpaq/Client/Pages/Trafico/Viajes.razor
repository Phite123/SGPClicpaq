@page "/viajes"
<h1>Viajes</h1>
<p>Descripción (*)</p>
<hr />

<button class="btn btn-outline-success" @onclick="() => gotocreaviaje(0)">Agregar</button>
<br />
<br />

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="4"
                AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@oRespuesta.List" TItem="Viaje" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Viaje" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Viaje" Property="ZonaDestino" Title="ZonaDestino" Width="120px" />
        <RadzenDataGridColumn TItem="Viaje" Property="Unidad" Title="Unidad" Width="80px" />
        <RadzenDataGridColumn TItem="Viaje" Property="Chofer" Title="Chofer" Width="80px" />
        
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click=@(() => alertaDeletear(data.Id)) Text="" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="refresh" Class="m-1" Click=@(() => gotocreaviaje(data.Id)) Text="" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="help_outline" Class="m-1" Click=@(() => info(data.Id)) Text="" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    Respuesta<List<Viaje>> oRespuesta = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Viaje>>>("/api/Viaje");
        oRespuesta = respuesta;
        oRespuesta.List = respuesta.List.Where(x => x.EstadoStr == "Creado").ToList();
    }

    async Task Deletear(int id)
    {
        await http.DeleteAsync($"/api/Viaje/{id}");
        await Get();
    }

    async Task gotocreaviaje(int id)
    {
        nav.NavigateTo($"/creaviaje/{id}");
    }

    async Task alertaDeletear(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Eliminará este viaje",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Deletear(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task info(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ModalInfo.id), id);
        var options = new ModalOptions() {
                HideHeader=true
    };

        var formModal = Modal.Show<ModalInfo>("", parameters,options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
            StateHasChanged();
        }


    }
}


