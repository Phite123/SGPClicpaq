@page "/creaviaje/{id:int}"
@using System.Text.Json

<div class="container-fluid">
    <div style="float:right;">
        <button class="btn btn-outline-danger" @onclick="alertaCancelar"><FeatherX Color="red"></FeatherX></button> &nbsp;
        <button class="btn btn-outline-primary" @onclick="alertaTerminar"><FeatherSave Color="blue"></FeatherSave></button> &nbsp;
        <button class="btn btn-outline-success" @onclick="alertaFinalizar"><FeatherArrowRight Color="green"></FeatherArrowRight></button>
            
    </div>
    <RadzenTabs TabPosition="@TabPosition.Top" Class="w-95 my-0 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Guias">
                <div class="row">
                    <div class="col-lg-6 col-xl-4">
                        <RadzenCard Class="m-3">
                            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Class="my-4">Elegir guias</RadzenText>
                            <EditForm Model="@guia">
                                <InputNumber class="form-control" @bind-Value="@guia"></InputNumber>
                            </EditForm>
                            <br />
                            <button class="btn btn-outline-success" @onclick="() => addGuia(guia)">Agregar guia</button>
                        </RadzenCard>
                        <RadzenCard Class="m-3">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Total guía</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@totalGuias</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Total bultos</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@totalBultos</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Total volumen</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@totalVolumen</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Total peso</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@totalPeso</b></RadzenText>
                        </RadzenCard>
                    </div>
                    <div class="col-lg-6 col-xl-8">
                        <RadzenCard Class="m-3">
                            <RadzenDataGrid AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10"
                                            AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                            Data="@listGuias" TItem="Guium" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or" @ref="guiaGrid">
                                <Columns>
                                    <RadzenDataGridColumn TItem="Guium" Property="Guia" Title="Numero" Width="50px" TextAlign="TextAlign.Center" />
                                    <RadzenDataGridColumn TItem="Guium" Property="Bulto" Title="#Bultos" Width="50px" />
                                    <RadzenDataGridColumn TItem="Guium" Property="Volumen" Title="Volumen" Width="50px" />
                                    <RadzenDataGridColumn TItem="Guium" Property="Peso" Title="Peso" Width="50px" />
                                    <RadzenDataGridColumn TItem="Guium" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
                                        <Template Context="data">
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="help_outline" Class="m-1" Click=@(() => alertaDelete(data.Guia)) Text="" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenCard>
                    </div>
                </div>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Viaje">
                <div class="row">
                    <div class="col-lg-6 col-xl-4">
                        <RadzenCard Class="m-3">

                            <div style="display: flex; align-items: center">
                                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Class="my-4">Transporte propio:</RadzenText>
                                <RadzenSwitch style="margin-left: 1rem" @bind-Value=@enabled />
                            </div>
                            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Class="my-4">Chofer:</RadzenText>

                            <RadzenDropDown Disabled=@(!enabled) TValue="string" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            @bind-Value="oViaje.Chofer" Data=@obj1 ValueProperty="Nombre" TextProperty="Nombre"
                                            Class="w-100">
                                <Template>
                                    @($"{context.Nombre} {context.Apellido}")
                                </Template>
                            </RadzenDropDown>

                            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Class="my-4">Dominio:</RadzenText>

                            <RadzenDropDown Disabled=@(!enabled) AllowClear="true" TValue="string" AllowVirtualization="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowFiltering="true" Data=@obj2 TextProperty="Dominio" ValueProperty="Dominio" @bind-Value="oViaje.Unidad" Class="w-100" />

                            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Class="my-4">Kilometros:</RadzenText>
                            <EditForm Model="@oViaje">
                                <InputNumber Disabled=@(!enabled) class="form-control" @bind-Value="@oViaje.Kilometros"></InputNumber>
                            </EditForm>
                        </RadzenCard>
                    </div>

                    <div class="col-lg-6 col-xl-4">
                        <RadzenCard Class="m-3">
                            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Class="my-4">Fecha del viaje:</RadzenText>
                            <EditForm Model="@oViaje">
                                <RadzenDatePicker TValue="DateTime?" @bind-Value="@oViaje.FechaViaje" Min="DateTime.Today" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" />
                            </EditForm>
                            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Class="my-4">Zona de destino:</RadzenText>
                            <EditForm Model="@oViaje">
                                <InputText class="form-control" @bind-Value="@oViaje.ZonaDestino"></InputText>
                            </EditForm>

                            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" Class="my-4">Observaciones (opcional):</RadzenText>
                            <EditForm Model="@oViaje">
                                <InputText class="form-control" @bind-Value="@oViaje.Observaciones"></InputText>
                            </EditForm>
                        </RadzenCard>
                    </div>
                    <div class="col-lg-6 col-xl-4">
                        <RadzenCard Class="m-3">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Total guía</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@totalGuias</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Total bultos</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@totalBultos</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Total volumen</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@totalVolumen</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Total peso</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@totalPeso</b></RadzenText>
                        </RadzenCard>
                    </div>
                </div>
            </RadzenTabsItem>

            
        </Tabs>
    </RadzenTabs>

</div>

@code {
    [Parameter] public int id { get; set; }

    RadzenDataGrid<Guium>? guiaGrid;

    List<Chofer> obj1 = new();
    List<Movil> obj2 = new();
    Respuesta<List<Chofer>> oRtaChofer = new();
    Respuesta<List<Movil>> oRtaMovil = new();
    Respuesta<Viaje> oRtaViaje = new();

    Respuesta<Viaje> oRespuesta = new();
    int guia;

    List<int> guiasList = new();
    int? totalGuias = 0;
    int? totalBultos = 0;
    decimal? totalVolumen = 0;
    decimal? totalPeso = 0;

    bool enabled = true;

    List<Guium> listGuias = new();

    Viaje oViaje = new();


    protected override async Task OnInitializedAsync()
    {
        var rta1 = await http.GetFromJsonAsync<Respuesta<List<Chofer>>>("/api/chofer");
        oRtaChofer = rta1;
        obj1 = rta1.List;
        var rta2 = await http.GetFromJsonAsync<Respuesta<List<Movil>>>("/api/movil");
        oRtaMovil = rta2;
        obj2 = rta2.List;

        if (id != 0)
        {
            oRtaViaje = await http.GetFromJsonAsync<Respuesta<Viaje>>($"/api/viaje/{id}");
            oViaje = oRtaViaje.List;

            guiasList = JsonSerializer.Deserialize<List<int>>(oViaje.Guias);

            if (oViaje.Transporte == "Propio")
            {
                enabled = false;
            }
            else
            {
                enabled = true;
            }

            foreach(var id in guiasList){
                var oRta = await http.GetFromJsonAsync<Respuesta<Guium>>($"/api/guia/{id}");
                if (oRta.Exito == 1)
                {
                    listGuias.Add(oRta.List);
                    totalGuias = totalGuias + 1;
                    totalBultos = totalBultos + (int)oRta.List.Bulto;
                    totalVolumen = totalVolumen + oRta.List.Volumen;
                    totalPeso = totalPeso + oRta.List.Peso;
                }
            }
            StateHasChanged();
            guiaGrid.Reload();
            StateHasChanged();
        }
    }

    async Task terminar()
    {
        var guiasString = JsonSerializer.Serialize<List<int>>(guiasList);
        oViaje.Guias = guiasString;
        oViaje.TotalBultos = totalBultos;
        oViaje.TotalGuias = totalGuias;
        oViaje.TotalVolumen = (int)totalVolumen;
        oViaje.TotalPeso = (int)totalPeso;

        if (enabled == false)
        {
            oViaje.Transporte = "Propio";
        }
        else
        {
            oViaje.Transporte = "Tercerizado";
        }


        if (id == 0)
        {
            oViaje.TimeGenerado = DateTime.Now;
            oViaje.Sucursal = 3;
            var response = await http.PostAsJsonAsync<Viaje>("api/viaje", oViaje);
            oRespuesta = await response.Content.ReadFromJsonAsync<Respuesta<Viaje>>();
            ShowNotification(new NotificationMessage
                {
                    Style = "position: right;",
                    Severity = NotificationSeverity.Success,
                    Summary = "",
                    Detail = $"Se cargó el viaje {oRespuesta.List.Id}",
                    Duration = 4000
                });

        }
        else
        {
            var response = await http.PutAsJsonAsync<Viaje>("api/viaje", oViaje);

            ShowNotification(new NotificationMessage
                {
                    Style = "position: right;",
                    Severity = NotificationSeverity.Info,
                    Summary = "",
                    Detail = $"Se editó el viaje {id}",
                    Duration = 4000
                });
        }

        gotoviajes();
    }

    async Task addGuia(int guia)
    {
        var oRta = await http.GetFromJsonAsync<Respuesta<Guium>>($"/api/guia/{guia}");

        if (oRta.Exito == 1)
        {
            if (!guiasList.Contains(guia) && oRta.List.Idsucursal == 3)  //&& oRta.List.Anula == 0
            {
                guiasList.Add(guia);
                totalGuias = totalGuias + 1;
                totalBultos = totalBultos + (int)oRta.List.Bulto;
                totalVolumen = totalVolumen + oRta.List.Volumen;
                totalPeso = totalPeso + oRta.List.Peso;
                listGuias.Add(oRta.List);
                ShowNotification(new NotificationMessage
                    {
                        Style = "position: right;",
                        Severity = NotificationSeverity.Success,
                        Summary = "",
                        Detail = $"Se agrego la guia {guia} a la lista",
                        Duration = 4000
                    });

            }
            else if (oRta.List.Idsucursal != 3)
            {
                ShowNotification(new NotificationMessage
                    {
                        Style = "position: right;",
                        Severity = NotificationSeverity.Error,
                        Summary = "",
                        Detail = $"La guia {guia} no pertenece a esta sucursal",
                        Duration = 4000
                    });
            }
            //else if (oRta.List.Anula == 1)
            //{
            //    ShowNotification(new NotificationMessage
            //        {
            //            Style = "position: right;",
            //            Severity = NotificationSeverity.Error,
            //            Summary = "",
            //            Detail = $"La guia {guia} esta anulada",
            //            Duration = 4000
            //        });
            //}
            //else if (oRta.List.Anula == 2)
            //{
            //    ShowNotification(new NotificationMessage
            //        {
            //            Style = "position: right;",
            //            Severity = NotificationSeverity.Error,
            //            Summary = "",
            //            Detail = $"La guia {guia} ya salio del sistema",
            //            Duration = 4000
            //        });
            //}
            //else if (oRta.List.Anula == 3)
            //{
            //    ShowNotification(new NotificationMessage
            //        {
            //            Style = "position: right;",
            //            Severity = NotificationSeverity.Error,
            //            Summary = "",
            //            Detail = $"La guia {guia} no esta confirmada",
            //            Duration = 4000
            //        });
            //}
            else if (guiasList.Contains(guia))
            {
                ShowNotification(new NotificationMessage
                    {
                        Style = "position: right;",
                        Severity = NotificationSeverity.Error,
                        Summary = "",
                        Detail = $"La guia {guia} ya esta en la lista",
                        Duration = 4000
                    });
            }
            else
            {
                ShowNotification(new NotificationMessage
                    {
                        Style = "position: right;",
                        Severity = NotificationSeverity.Error,
                        Summary = "",
                        Detail = "Hubo un error",
                        Duration = 4000
                    });
            }
        }
        else
        {
            ShowNotification(new NotificationMessage
                {
                    Style = "position: right;",
                    Severity = NotificationSeverity.Error,
                    Summary = "",
                    Detail = $"La guia {guia} no existe",
                    Duration = 4000
                });
        }
        StateHasChanged();
        guiaGrid.Reload();
        StateHasChanged();

    }

    async Task gotoviajes()
    {
        nav.NavigateTo("/viajes");
    }

    public async Task sacaGuia(int id)
    {
        var oRta = await http.GetFromJsonAsync<Respuesta<Guium>>($"/api/guia/{id}");
        if (oRta.Exito == 1)
        {
            guiasList.Remove(id);
            totalGuias = totalGuias - 1;
            totalBultos = totalBultos - (int)oRta.List.Bulto;
            totalVolumen = totalVolumen - oRta.List.Volumen;
            totalPeso = totalPeso - oRta.List.Peso;
            listGuias = listGuias.Where(x => x.Guia != id).ToList();
        }
        guiaGrid.Reload();
        StateHasChanged();
    }

    public async Task alertaTerminar()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se cargará el viaje",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Confirmar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            oViaje.EstadoStr = "Creado";
            await terminar();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task alertaFinalizar()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se finalizará la carga de este viaje",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Confirmar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            oViaje.EstadoStr = "Deposito";
            await terminar();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará esta guía",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            sacaGuia(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task alertaCancelar()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "No se guardaran los cambios",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Confirmar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            gotoviajes();

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }
}
